(define simplify
  (lambda (expr)
    (cond
      ;number
      ((number? expr)
        expr)
      ;symbol
      ((symbol? expr)
        expr)
      ;list
      ((list? expr)
        (let ((left (car expr))
                (op (car (cdr expr)))
             )
          
          (cond 
            ; (a + 0)
            ((and (equal? op '+)
                  (equal? (caddr expr) 0))
                  (simplify left)
            )
            ;(0 + e)
            ((and (equal? op '+)
                  (equal? (simplify left) 0))
                  (simplify (caddr expr))
            )
            ;(0 * e) and (e * 0)
            ((and (equal? op '*)
                  (or(equal? left 0)(equal? (caddr expr) 0)))
                0
            )
            ;(e * 1)
            ((and (equal? op '*)
                  (equal? (simplify (caddr expr)) 1))
                  (simplify left)
            )
            ;(1 * e)
            ((and (equal? op '*)
                  (equal? (simplify left) 1))
                  (simplify (caddr expr))
            )
            ;(e / 1)
            ((and (equal? op '/)
                  (equal? (caddr expr) 1))
                  (simplify left)
            )
            ;(e - 0)
            ((and (equal? op '-)
                  (equal? (caddr expr) 0))
                  (simplify left)
            )
            ;(e - e)
            ((and (equal? op '-)
                  (equal? (simplify left) (simplify(caddr expr))))
                  0
            )
            ;(e ** 0)
            ((and (equal? op '**)
                  (equal? (simplify (caddr expr)) 0))
                  1
            )
            ;(e ** 1)
            ((and (equal? op '**)
                  (equal? (simplify (caddr expr)) 1))
                  (simplify left)
            )
            ;(1 ** e)
            ((and (equal? op '**)
                  (equal? (simplify left) 1))
                  (simplify left)
            )
            ; -1
            ((and (number? op)
                  (equal? left 'dec))
                  (- (simplify op) 1)
            )
            ; +1
            ((and (number? op)
                  (equal? left 'inc))
                  (+ (simplify op) 1)
            )
            ; symbol op list
            ; list op symbol
            ((and (or(symbol? left)
                      (symbol? (caddr expr))
                  )
                  (or(equal? op '*)
                      (equal? op '+)
                      (equal? op '-)
                      (equal? op '**)
                      (equal? op '/)
                  )
                  (or(list? (caddr expr))
                      (list? left))
                  )
                    (simplify(list (simplify left) (simplify op) (simplify (caddr expr))))
            )

            ;number op list
            ;list op number
             ((and (or(number? left)
                      (number? (caddr expr)))
                  (or(equal? op '*)
                      (equal? op '+)
                      (equal? op '-)
                      (equal? op '**)
                      (equal? op '/))
                  (or(list? (caddr expr))
                      (list? left)))
                    (simplify(list (simplify left) (simplify op) (simplify (caddr expr))))
             )

              ;number op number
             ((and (number? left)
                   (number? (caddr expr)))
                      ((equal? op '+) (+ (simplify left) (simplify (caddr expr))))
                      ((equal? op '-) (- (simplify left) (simplify (caddr expr))))
                      ((equal? op '*) (* (simplify left) (simplify (caddr expr))))
                      ((equal? op '/) (/ (simplify left) (simplify (caddr expr))))
                      ((equal? op '**) (expt (simplify left) (simplify (caddr expr))))
             )

              ; list op list
             ((and (list? left)
                   (list? (caddr expr)))
                    (simplify(list (simplify left)(simplify op) (simplify (caddr expr))))
             )

             ; symbol op symbol
            (else 
              expr)

            )
          )
        )
      (error 'XerrorX)

    )
  )
)